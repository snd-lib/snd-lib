/**
   * @license
   * Snd.js v1.2.4
   * Released under the MIT License.
   */
var Snd=function(){"use strict";function t(t){if(t.__esModule)return t;var e=Object.defineProperty({},"__esModule",{value:!0});return Object.keys(t).forEach((function(n){var o=Object.getOwnPropertyDescriptor(t,n);Object.defineProperty(e,n,o.get?o:{enumerable:!0,get:function(){return t[n]}})})),e}var e={};function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)
/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */}var o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},o(t,e)};var i=function(){return i=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},i.apply(this,arguments)};var r=Object.create?function(t,e,n,o){void 0===o&&(o=n),Object.defineProperty(t,o,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,o){void 0===o&&(o=n),t[o]=e[n]};function s(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],o=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function a(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var o,i,r=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(o=r.next()).done;)s.push(o.value)}catch(t){i={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(i)throw i.error}}return s}function l(t){return this instanceof l?(this.v=t,this):new l(t)}var u=Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e};var d,_=Object.freeze({__proto__:null,__extends:function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},get __assign(){return i},__rest:function(t,e){var n={};for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.indexOf(o)<0&&(n[o]=t[o]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(o=Object.getOwnPropertySymbols(t);i<o.length;i++)e.indexOf(o[i])<0&&Object.prototype.propertyIsEnumerable.call(t,o[i])&&(n[o[i]]=t[o[i]])}return n},__decorate:function(t,e,o,i){var r,s=arguments.length,a=s<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,o):i;if("object"===("undefined"==typeof Reflect?"undefined":n(Reflect))&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,i);else for(var l=t.length-1;l>=0;l--)(r=t[l])&&(a=(s<3?r(a):s>3?r(e,o,a):r(e,o))||a);return s>3&&a&&Object.defineProperty(e,o,a),a},__param:function(t,e){return function(n,o){e(n,o,t)}},__metadata:function(t,e){if("object"===("undefined"==typeof Reflect?"undefined":n(Reflect))&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},__awaiter:function(t,e,n,o){return new(n||(n=Promise))((function(i,r){function s(t){try{l(o.next(t))}catch(t){r(t)}}function a(t){try{l(o.throw(t))}catch(t){r(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}l((o=o.apply(t,e||[])).next())}))},__generator:function(t,e){var n,o,i,r,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,o=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){s.label=r[1];break}if(6===r[0]&&s.label<i[1]){s.label=i[1],i=r;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(r);break}i[2]&&s.ops.pop(),s.trys.pop();continue}r=e.call(t,s)}catch(t){r=[6,t],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}},__createBinding:r,__exportStar:function(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||r(e,t,n)},__values:s,__read:a,__spread:function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(a(arguments[e]));return t},__spreadArrays:function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var o=Array(t),i=0;for(e=0;e<n;e++)for(var r=arguments[e],s=0,a=r.length;s<a;s++,i++)o[i]=r[s];return o},__spreadArray:function(t,e,n){if(n||2===arguments.length)for(var o,i=0,r=e.length;i<r;i++)!o&&i in e||(o||(o=Array.prototype.slice.call(e,0,i)),o[i]=e[i]);return t.concat(o||Array.prototype.slice.call(e))},__await:l,__asyncGenerator:function(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o,i=n.apply(t,e||[]),r=[];return o={},s("next"),s("throw"),s("return"),o[Symbol.asyncIterator]=function(){return this},o;function s(t){i[t]&&(o[t]=function(e){return new Promise((function(n,o){r.push([t,e,n,o])>1||a(t,e)}))})}function a(t,e){try{(n=i[t](e)).value instanceof l?Promise.resolve(n.value.v).then(u,d):_(r[0][2],n)}catch(t){_(r[0][3],t)}var n}function u(t){a("next",t)}function d(t){a("throw",t)}function _(t,e){t(e),r.shift(),r.length&&a(r[0][0],r[0][1])}},__asyncDelegator:function(t){var e,n;return e={},o("next"),o("throw",(function(t){throw t})),o("return"),e[Symbol.iterator]=function(){return this},e;function o(o,i){e[o]=t[o]?function(e){return(n=!n)?{value:l(t[o](e)),done:"return"===o}:i?i(e):e}:i}},__asyncValues:function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=s(t),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(n){e[n]=t[n]&&function(e){return new Promise((function(o,i){(function(t,e,n,o){Promise.resolve(o).then((function(e){t({value:e,done:n})}),e)})(o,i,(e=t[n](e)).done,e.value)}))}}},__makeTemplateObject:function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},__importStar:function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return u(e,t),e},__importDefault:function(t){return t&&t.__esModule?t:{default:t}},__classPrivateFieldGet:function(t,e,n,o){if("a"===n&&!o)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?o:"a"===n?o.call(t):o?o.value:e.get(t)},__classPrivateFieldSet:function(t,e,n,o,i){if("m"===o)throw new TypeError("Private method is not writable");if("a"===o&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===o?i.call(t,n):i?i.value=n:e.set(t,n),n}}),c=t(_),p={},h={exports:{}},f="object"===("undefined"==typeof Reflect?"undefined":n(Reflect))?Reflect:null,y=f&&"function"==typeof f.apply?f.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)};d=f&&"function"==typeof f.ownKeys?f.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var m=Number.isNaN||function(t){return t!=t};function v(){v.init.call(this)}h.exports=v,h.exports.once=function(t,e){return new Promise((function(n,o){function i(n){t.removeListener(e,r),o(n)}function r(){"function"==typeof t.removeListener&&t.removeListener("error",i),n([].slice.call(arguments))}A(t,e,r,{once:!0}),"error"!==e&&function(t,e,n){"function"==typeof t.on&&A(t,"error",e,n)}(t,i,{once:!0})}))},v.EventEmitter=v,v.prototype._events=void 0,v.prototype._eventsCount=0,v.prototype._maxListeners=void 0;var w=10;function S(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+n(t))}function g(t){return void 0===t._maxListeners?v.defaultMaxListeners:t._maxListeners}function O(t,e,n,o){var i,r,s,a;if(S(n),void 0===(r=t._events)?(r=t._events=Object.create(null),t._eventsCount=0):(void 0!==r.newListener&&(t.emit("newListener",e,n.listener?n.listener:n),r=t._events),s=r[e]),void 0===s)s=r[e]=n,++t._eventsCount;else if("function"==typeof s?s=r[e]=o?[n,s]:[s,n]:o?s.unshift(n):s.push(n),(i=g(t))>0&&s.length>i&&!s.warned){s.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=t,l.type=e,l.count=s.length,a=l,console&&console.warn&&console.warn(a)}return t}function b(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function E(t,e,n){var o={fired:!1,wrapFn:void 0,target:t,type:e,listener:n},i=b.bind(o);return i.listener=n,o.wrapFn=i,i}function T(t,e,n){var o=t._events;if(void 0===o)return[];var i=o[e];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(t){for(var e=new Array(t.length),n=0;n<e.length;++n)e[n]=t[n].listener||t[n];return e}(i):L(i,i.length)}function N(t){var e=this._events;if(void 0!==e){var n=e[t];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function L(t,e){for(var n=new Array(e),o=0;o<e;++o)n[o]=t[o];return n}function A(t,e,o,i){if("function"==typeof t.on)i.once?t.once(e,o):t.on(e,o);else{if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+n(t));t.addEventListener(e,(function n(r){i.once&&t.removeEventListener(e,n),o(r)}))}}Object.defineProperty(v,"defaultMaxListeners",{enumerable:!0,get:function(){return w},set:function(t){if("number"!=typeof t||t<0||m(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");w=t}}),v.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},v.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||m(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},v.prototype.getMaxListeners=function(){return g(this)},v.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var o="error"===t,i=this._events;if(void 0!==i)o=o&&void 0===i.error;else if(!o)return!1;if(o){var r;if(e.length>0&&(r=e[0]),r instanceof Error)throw r;var s=new Error("Unhandled error."+(r?" ("+r.message+")":""));throw s.context=r,s}var a=i[t];if(void 0===a)return!1;if("function"==typeof a)y(a,this,e);else{var l=a.length,u=L(a,l);for(n=0;n<l;++n)y(u[n],this,e)}return!0},v.prototype.addListener=function(t,e){return O(this,t,e,!1)},v.prototype.on=v.prototype.addListener,v.prototype.prependListener=function(t,e){return O(this,t,e,!0)},v.prototype.once=function(t,e){return S(e),this.on(t,E(this,t,e)),this},v.prototype.prependOnceListener=function(t,e){return S(e),this.prependListener(t,E(this,t,e)),this},v.prototype.removeListener=function(t,e){var n,o,i,r,s;if(S(e),void 0===(o=this._events))return this;if(void 0===(n=o[t]))return this;if(n===e||n.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete o[t],o.removeListener&&this.emit("removeListener",t,n.listener||e));else if("function"!=typeof n){for(i=-1,r=n.length-1;r>=0;r--)if(n[r]===e||n[r].listener===e){s=n[r].listener,i=r;break}if(i<0)return this;0===i?n.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(n,i),1===n.length&&(o[t]=n[0]),void 0!==o.removeListener&&this.emit("removeListener",t,s||e)}return this},v.prototype.off=v.prototype.removeListener,v.prototype.removeAllListeners=function(t){var e,n,o;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[t]),this;if(0===arguments.length){var i,r=Object.keys(n);for(o=0;o<r.length;++o)"removeListener"!==(i=r[o])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=n[t]))this.removeListener(t,e);else if(void 0!==e)for(o=e.length-1;o>=0;o--)this.removeListener(t,e[o]);return this},v.prototype.listeners=function(t){return T(this,t,!0)},v.prototype.rawListeners=function(t){return T(this,t,!1)},v.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):N.call(t,e)},v.prototype.listenerCount=N,v.prototype.eventNames=function(){return this._eventsCount>0?d(this._events):[]};var D={},P={resources:["./assets/sounds/sprite/01/audioSprite.ogg","./assets/sounds/sprite/01/audioSprite.m4a","./assets/sounds/sprite/01/audioSprite.mp3","./assets/sounds/sprite/01/audioSprite.ac3"],spritemap:{button:{start:0,end:.1001814058956916,loop:!1},caution:{start:2,end:2.160544217687075,loop:!1},celebration:{start:4,end:5,loop:!1},disabled:{start:6,end:6.070113378684807,loop:!1},notification:{start:8,end:8.30031746031746,loop:!1},progress_loop:{start:10,end:11.5,loop:!1},ringtone_loop:{start:13,end:15,loop:!1},select:{start:16,end:16.1,loop:!1},swipe:{start:18,end:18.15,loop:!1},swipe_01:{start:20,end:20.15,loop:!1},swipe_02:{start:22,end:22.150272108843538,loop:!1},swipe_03:{start:24,end:24.150272108843538,loop:!1},swipe_04:{start:26,end:26.15,loop:!1},swipe_05:{start:28,end:28.15,loop:!1},tap_01:{start:30,end:30.01,loop:!1},tap_02:{start:32,end:32.01,loop:!1},tap_03:{start:34,end:34.01004535147392,loop:!1},tap_04:{start:36,end:36.01002267573696,loop:!1},tap_05:{start:38,end:38.01,loop:!1},toggle_off:{start:40,end:40.09972789115646,loop:!1},toggle_on:{start:42,end:42.09972789115646,loop:!1},transition_down:{start:44,end:44.10018140589569,loop:!1},transition_up:{start:46,end:46.10063492063492,loop:!1},type_01:{start:48,end:48.010068027210885,loop:!1},type_02:{start:50,end:50.01011337868481,loop:!1},type_03:{start:52,end:52.010068027210885,loop:!1},type_04:{start:54,end:54.0102947845805,loop:!1},type_05:{start:56,end:56.01011337868481,loop:!1}}},j={resources:["./assets/sounds/sprite/02/audioSprite.ogg","./assets/sounds/sprite/02/audioSprite.m4a","./assets/sounds/sprite/02/audioSprite.mp3","./assets/sounds/sprite/02/audioSprite.ac3"],spritemap:{button:{start:0,end:.5513151927437642,loop:!1},caution:{start:2,end:2.499750566893424,loop:!1},celebration:{start:4,end:7.001179138321996,loop:!1},disabled:{start:9,end:9.499115646258504,loop:!1},notification:{start:11,end:14.0037641723356,loop:!1},progress_loop:{start:16,end:17.892199546485262,loop:!1},ringtone_loop:{start:19,end:20.66204081632653,loop:!1},select:{start:22,end:22.26063492063492,loop:!1},swipe_01:{start:24,end:24.209115646258503,loop:!1},swipe_02:{start:26,end:26.230566893424037,loop:!1},swipe_03:{start:28,end:28.230385487528345,loop:!1},swipe_04:{start:30,end:30.23963718820862,loop:!1},swipe_05:{start:32,end:32.196281179138325,loop:!1},tap_01:{start:34,end:34.19621315192744,loop:!1},tap_02:{start:36,end:36.21399092970522,loop:!1},tap_03:{start:38,end:38.2343537414966,loop:!1},tap_04:{start:40,end:40.19183673469388,loop:!1},tap_05:{start:42,end:42.21993197278911,loop:!1},toggle_off:{start:44,end:44.55002267573696,loop:!1},toggle_on:{start:46,end:46.51664399092971,loop:!1},transition_down:{start:48,end:48.7502947845805,loop:!1},transition_up:{start:50,end:50.7502947845805,loop:!1},type_01:{start:52,end:52.50140589569161,loop:!1},type_02:{start:54,end:54.500680272108845,loop:!1},type_03:{start:56,end:56.500090702947844,loop:!1},type_04:{start:58,end:58.500090702947844,loop:!1},type_05:{start:60,end:60.50004535147392,loop:!1}}},x={resources:["./assets/sounds/sprite/03/audioSprite.ogg","./assets/sounds/sprite/03/audioSprite.m4a","./assets/sounds/sprite/03/audioSprite.mp3","./assets/sounds/sprite/03/audioSprite.ac3"],spritemap:{button:{start:0,end:.4033333333333333,loop:!1},caution:{start:2,end:2.2503854875283444,loop:!1},celebration:{start:4,end:5.0561224489795915,loop:!1},disabled:{start:7,end:7.1000680272108845,loop:!1},notification:{start:9,end:9.753197278911564,loop:!1},progress_loop:{start:11,end:12.701383219954648,loop:!1},ringtone_loop:{start:14,end:16.085532879818594,loop:!1},select:{start:18,end:18.199909297052155,loop:!1},swipe_01:{start:20,end:20.138639455782315,loop:!1},swipe_02:{start:22,end:22.14278911564626,loop:!1},swipe_03:{start:24,end:24.14666666666667,loop:!1},swipe_04:{start:26,end:26.158798185941045,loop:!1},swipe_05:{start:28,end:28.142585034013607,loop:!1},tap_01:{start:30,end:30.03,loop:!1},tap_02:{start:32,end:32.030589569160995,loop:!1},tap_03:{start:34,end:34.03022675736961,loop:!1},tap_04:{start:36,end:36.034013605442176,loop:!1},tap_05:{start:38,end:38.037120181405896,loop:!1},toggle_off:{start:40,end:40.22455782312925,loop:!1},toggle_on:{start:42,end:42.2743537414966,loop:!1},transition_down:{start:44,end:44.60936507936508,loop:!1},transition_up:{start:46,end:46.62498866213152,loop:!1},type_01:{start:48,end:48.04462585034014,loop:!1},type_02:{start:50,end:50.03868480725624,loop:!1},type_03:{start:52,end:52.07,loop:!1},type_04:{start:54,end:54.04698412698413,loop:!1},type_05:{start:56,end:56.045034013605445,loop:!1}}};Object.defineProperty(D,"__esModule",{value:!0}),D.TOGGLE_SOUND_KEYS=D.TYPE_SOUND_KEYS=D.SWIPE_SOUND_KEYS=D.TAP_SOUND_KEYS=D.EVENT_CLASS_NAMES=D.SOUNDS=D.ENABLE_TAGS=D.KIT_INFO=D.KITS=void 0;const B=c,I=(0,B.__importDefault)(P),V=(0,B.__importDefault)(j),U=(0,B.__importDefault)(x),K="button",C="caution",k="celebration",M="disabled",R="notification",G="progress_loop",W="ringtone_loop",z="select",F="swipe",Y="tap",$="toggle",q="toggle_off",H="toggle_on",J="transition_down",Q="transition_up",X="type",Z=["tap_01","tap_02","tap_03","tap_04","tap_05"];D.TAP_SOUND_KEYS=Z;const tt=["swipe_01","swipe_02","swipe_03","swipe_04","swipe_05"];D.SWIPE_SOUND_KEYS=tt;const et=["type_01","type_02","type_03","type_04","type_05"];D.TYPE_SOUND_KEYS=et;const nt=[H,q];D.TOGGLE_SOUND_KEYS=nt;const ot={BUTTON:K,CAUTION:C,CELEBRATION:k,DISABLED:M,NOTIFICATION:R,PROGRESS_LOOP:G,RINGTONE_LOOP:W,SELECT:z,SWIPE:F,TAP:Y,TOGGLE_ON:H,TOGGLE_OFF:q,TRANSITION_DOWN:J,TRANSITION_UP:Q,TYPE:X},it={[K]:"snd__button",[C]:"snd__caution",[k]:"snd__celebration",[M]:"snd__disabled",[R]:"snd__notification",[G]:"snd__progress_loop",[W]:"snd__ringtone_loop",[z]:"snd__select",[F]:"snd__swipe",[Y]:"snd__tap",[$]:"snd__toggle",[J]:"snd__transition_down",[Q]:"snd__transition_up",[X]:"snd__type"},rt=Object.freeze(ot);D.SOUNDS=rt;const st=Object.freeze(it);D.EVENT_CLASS_NAMES=st;D.ENABLE_TAGS={"input:text,email,number,password,search,url,tel":{events:{input:"type"}},"input:checkbox":{events:{change:"toggle"}},"input:radio":{events:{change:"select"}},"input:button,reset,submit":{events:{click:"button,caution,celebration,disabled,notification,tap,transition_down,transition_up"}},select:{events:{change:"select"}},textarea:{events:{input:"type"}},any:{events:{click:"button,caution,celebration,disabled,notification,tap,transition_down,transition_up"}}};const at=Object.freeze({SND01:"01",SND02:"02",SND03:"03"});D.KITS=at;const lt={[at.SND01]:{json:I.default,audioSrc:"https://cdn.jsdelivr.net/gh/snd-lib/snd-lib@v1.2.4/assets/sounds/sprite/01/audioSprite.mp3"},[at.SND02]:{json:V.default,audioSrc:"https://cdn.jsdelivr.net/gh/snd-lib/snd-lib@v1.2.4/assets/sounds/sprite/02/audioSprite.mp3"},[at.SND03]:{json:U.default,audioSrc:"https://cdn.jsdelivr.net/gh/snd-lib/snd-lib@v1.2.4/assets/sounds/sprite//03/audioSprite.mp3"}},ut=Object.freeze(lt);D.KIT_INFO=ut;var dt={},_t={},ct={};Object.defineProperty(ct,"__esModule",{value:!0});ct.default=class{constructor(t,e){this.audioSrc=null,this._gain=null,this._tail=null,this._volume=1,this._masterVolume=1,this.audioSrc=t,this._gain=e,this._tail=this.audioSrc}set volume(t){this._volume=t,this._setVolume()}get volume(){return this._volume}set masterVolume(t){this._masterVolume=t,this._setVolume()}get masterVolume(){return this._masterVolume}_setVolume(){null!==this._gain&&(this._gain.gain.value=this.volume*this.masterVolume)}connect(t){var e;return null===(e=this._tail)||void 0===e||e.connect(t),this._tail=t,this}};var pt={};Object.defineProperty(pt,"__esModule",{value:!0});const ht=c;class ft{constructor(t,e,n,o,i,r){if(this._propName="",this._to=0,this._from=0,this._duration=.5,this._delay=0,this._onComplete=()=>{},this._onUpdate=()=>{},this._updater=0,this._tween=(t,e)=>(0,ht.__awaiter)(this,void 0,void 0,(function*(){if(void 0===this._target[this._propName])return;this.kill();const n=this._time,o=this._duration,i=this._delay,r=n+o+i;for(;this._time<r;){if(this._time<n+i)continue;const o=this._time,s=(e-t)*((o-n)/(r-n))+t;this._target[this._propName]=s,this._onUpdate(),yield new Promise((t=>{this._updater=requestAnimationFrame(t)}))}this.kill(),this._target[this._propName]=e,this._onUpdate(),this._onComplete()})),this.kill=()=>{cancelAnimationFrame(this._updater)},this._target=t,this._propName=e,this._from=n,this._to=o,r=Object.assign(Object.assign({},ft._defaultOptions),r),this._duration=null==r?void 0:r.duration,this._delay=null==r?void 0:r.delay,this._onComplete=null==r?void 0:r.onComplete,this._onUpdate=null==r?void 0:r.onUpdate,void 0===this._target[this._propName])throw new Error(`prop: ${this._propName} does not exists in ${this._target}`);switch(i){case"to":this._tweenTo();break;case"from":this._tweenFrom();break;case"fromTo":this._tweenFromTo()}}static to(t,e,n,o){if(void 0===t[e])throw new Error(`prop: ${e} does not exists in ${t}`);return new ft(t,e,0,n,"to",o)}static from(t,e,n,o){if(void 0===t[e])throw new Error(`prop: ${e} does not exists in ${t}`);return new ft(t,e,n,0,"from",o)}static fromTo(t,e,n,o,i){if(void 0===t[e])throw new Error(`prop: ${e} does not exists in ${t}`);return new ft(t,e,n,o,"fromTo",i)}get _time(){return Date.now()/1e3}_tweenTo(){const t=this._target[this._propName],e=this._to;this._tween(t,e)}_tweenFrom(){const t=this._from,e=this._target[this._propName];this._tween(t,e)}_tweenFromTo(){const t=this._from,e=this._to;this._tween(t,e)}}pt.default=ft,ft._defaultOptions={duration:.5,delay:0,onComplete:()=>{},onUpdate:()=>{}},Object.defineProperty(_t,"__esModule",{value:!0});const yt=c,mt=(0,yt.__importDefault)(ct),vt=(0,yt.__importDefault)(pt);class wt{constructor(){this._audioArrayBuffer=null,this._audioBuffer=null,this._audioList=new Map,this._cnt=1e3,this._json=null,this._hasStartedLoading=!1,this._hasLoaded=!1,this._hasStartedAnalysis=!1,this._hasAnalyzed=!1,this._masterVolume=1,this._analyzePromise=null,wt._instances.push(this)}static get isActive(){return this._isActive}static activate(){if(!this._isActive)try{const t=window.AudioContext||window.webkitAudioContext;this._ctx=new t;const e=this._ctx.createBufferSource();e.start();try{e.stop()}catch(t){console.warn(t)}this._isActive=!0,this._analyzeAllInstances()}catch(t){throw new Error(`an err occurred while AudioSource.setup ${t}`)}}static _analyzeAllInstances(){this._instances.forEach((t=>{t._hasLoaded&&!t._hasStartedAnalysis&&t.analyze()}))}static _createAudioBuffer(t){return(0,yt.__awaiter)(this,void 0,void 0,(function*(){try{return"undefined"!=typeof Promise&&1===this._ctx.decodeAudioData.length?yield this._ctx.decodeAudioData(t):new Promise(((e,n)=>{this._ctx.decodeAudioData(t,(t=>e(t)),(t=>n(t)))}))}catch(t){throw new Error(`an err occured while AudioSource._createAudioBuffer ${t}`)}}))}static _createAudioArrayBuffer(t){return(0,yt.__awaiter)(this,void 0,void 0,(function*(){try{const e=yield fetch(t);return yield e.arrayBuffer()}catch(t){throw new Error(`an err occurred while AudioSource._createAudioArrayBuffer ${t}`)}}))}get _uniqueKey(){return this._cnt++}set masterVolume(t){this._masterVolume=t,this._audioList.forEach((t=>{t.nodes.masterVolume=this._masterVolume}))}get masterVolume(){return this._masterVolume}load(t,e){return(0,yt.__awaiter)(this,void 0,void 0,(function*(){if(this._hasStartedLoading)console.warn("The file has already started loading.");else{this._json=e,this._hasStartedLoading=!0;try{this._audioArrayBuffer=yield wt._createAudioArrayBuffer(t),this._hasLoaded=!0}catch(t){throw t instanceof Error?t:new Error("unknown error")}}}))}analyze(){return(0,yt.__awaiter)(this,void 0,void 0,(function*(){if(wt.isActive)if(this._hasStartedAnalysis)console.warn("analyze(): AudioBuffer has already started analysis");else if(this._hasLoaded&&null!=this._audioArrayBuffer){this._hasStartedAnalysis=!0;try{this._analyzePromise=wt._createAudioBuffer(this._audioArrayBuffer),this._audioBuffer=yield this._analyzePromise,this._analyzePromise=null,this._hasAnalyzed=!0}catch(t){throw t instanceof Error?t:new Error("unknown error")}}else console.warn("analyze(): The file hasn't loaded yet.")}))}play(t,e){var n,o;if(!this._hasLoaded)return console.warn("play(): The file hasn't loaded yet."),-999;if(!this._hasAnalyzed){if(!this._hasStartedAnalysis)try{wt.activate()}catch(t){return console.warn("play(): Can not play audio before initialization (AudioContext must be initialization by pointer event)."),-999}if(null!=this._analyzePromise){const n=this._uniqueKey;return this._playLater(n,t,e),n}return console.warn("_analyzePromise is null"),-999}if(null===this._json||!this._json.spritemap||!(t in this._json.spritemap))throw new Error(`json error: ${this._json}`);if("interrupted"==(null===(n=wt._ctx)||void 0===n?void 0:n.state)){const n=this._uniqueKey;return null===(o=wt._ctx)||void 0===o||o.resume().then((()=>{this.play(t,e)})),n}const i=this._uniqueKey;return this._play(i,t,e),this.setLoop(e.loop,i),this.setVolume(e.volume,i),i}stop(t,e=0){var n;this._audioList.has(t)&&(null===(n=this._audioList.get(t))||void 0===n||n.nodes.audioSrc.stop(wt._ctx.currentTime+e),this._audioList.delete(t))}setVolume(t,e){var n;if(!this._audioList.has(e))return;const o=null===(n=this._audioList.get(e))||void 0===n?void 0:n.nodes;null!==o&&null!==o.volume&&(o.volume=t)}setLoop(t,e){var n,o;if(!this._audioList.has(e))return;const i=null===(n=this._audioList.get(e))||void 0===n?void 0:n.key,r=null===(o=this._audioList.get(e))||void 0===o?void 0:o.nodes;if(t){const t=this._json.spritemap[i].start,e=this._json.spritemap[i].end;r.audioSrc.loop=!0,r.audioSrc.loopStart=t,r.audioSrc.loopEnd=e}else r.audioSrc.loop=!1}fade(t,e,n){var o;return(0,yt.__awaiter)(this,void 0,void 0,(function*(){if(!this._audioList.has(n))return;const i=null===(o=this._audioList.get(n))||void 0===o?void 0:o.nodes;yield new Promise((n=>{vt.default.to(i,"volume",t,{duration:e,onComplete:n})}))}))}fadeAll(t){this._audioList.forEach(((e,n)=>{this.fade(t,.5,n).then((t=>this.stop(n)))}))}_play(t,e,n){const o=wt._ctx.createBufferSource();o.buffer=this._audioBuffer;const i=wt._ctx.createGain(),r=new mt.default(o,i);r.masterVolume=this.masterVolume,r.connect(i).connect(wt._ctx.destination);const s=this._json.spritemap[e].start,a=this._json.spritemap[e].end;if(n.loop)r.audioSrc.start(wt._ctx.currentTime+n.delay,s,a);else{const t=Math.max(a-s,.1);r.audioSrc.start(wt._ctx.currentTime+n.delay,s,t)}r.audioSrc.onended=()=>{this.stop(t),r.audioSrc.disconnect(),r.audioSrc.buffer=null,n.callback(t)},this._audioList.set(t,{key:e,nodes:r})}_playLater(t,e,n){return(0,yt.__awaiter)(this,void 0,void 0,(function*(){yield this._analyzePromise,this._play(t,e,n),this.setLoop(n.loop,t),this.setVolume(n.volume,t)}))}}_t.default=wt,wt.END="end",wt._instances=[],wt._ctx=null,wt._isActive=!1,Object.defineProperty(dt,"__esModule",{value:!0});const St=c,gt=D,Ot=(0,St.__importDefault)(_t);dt.default=class{constructor(t){this._ids=new Map,this._audioSrc=new Ot.default,this._masterVolume=1,this.key=t}get masterVolume(){return this._masterVolume}set masterVolume(t){this._masterVolume=t,this._audioSrc.masterVolume=this._masterVolume}load(){return(0,St.__awaiter)(this,void 0,void 0,(function*(){const t=gt.KIT_INFO[this.key].json,e=gt.KIT_INFO[this.key].audioSrc;try{yield this._audioSrc.load(e,t)}catch(t){throw t}}))}analyze(){return(0,St.__awaiter)(this,void 0,void 0,(function*(){try{yield this._audioSrc.analyze()}catch(t){throw t}}))}play(t,e){const n=this._ids.get(t);void 0!==n&&this._audioSrc.fade(0,.05,n);const o=this._audioSrc.play(t,e),i=.05;e.duration>i&&setTimeout((()=>{this._audioSrc.fade(0,i,o)}),1e3*(e.duration-i)),this._ids.set(t.replace(/_[0-9][0-9]/,""),o)}stop(t){const e=this._ids.get(t);e?this._audioSrc.stop(e):console.warn(`[SoundKit.stop()] key: ${t} haven't played`)}fade(t){this._audioSrc.fadeAll(t)}};var bt={};Object.defineProperty(bt,"__esModule",{value:!0});const Et=(0,c.__importDefault)(h.exports),Tt=D;class Nt extends Et.default{constructor(){super(),this._init()}_init(){for(const t in Tt.EVENT_CLASS_NAMES){const e=Tt.EVENT_CLASS_NAMES[t],n=document.getElementsByClassName(e);for(let e=0;e<n.length;e++){const o=n[e],i=t.replace("snd__",""),r=this._getEventName(i,o);if(null==r)break;this._listen(o,r,i)}}}_getEventName(t,e){const n=e.tagName.toLowerCase();for(const o in Tt.ENABLE_TAGS)if("input"==n&&null!=o.match("input")){const n=e.type||"",i=o.split(":")[1].split(",");for(const e in Tt.ENABLE_TAGS[o].events)for(const r in i){if(n!=i[r])continue;const s=Tt.ENABLE_TAGS[o].events[e].split(",");for(const n in s)if(t==s[n])return e}}else if(o==n||"any"==o)for(const e in Tt.ENABLE_TAGS[o].events){const n=Tt.ENABLE_TAGS[o].events[e].split(",");for(const o in n)if(t==n[o])return e}return null}_listen(t,e,n){t.addEventListener(e,(t=>this._process(t,e,n)))}_process(t,e,n){const o=t.target;o.classList.contains(`snd__${n}`)&&("toggle"==n&&(n=o.checked?Tt.TOGGLE_SOUND_KEYS[0]:Tt.TOGGLE_SOUND_KEYS[1]),this._emit(o,e,n))}_emit(t,e,n){document.documentElement.classList.contains("muted")||this.emit(Nt.INTERACT,n)}}bt.default=Nt,Object.defineProperty(p,"__esModule",{value:!0});const Lt=c,At=(0,Lt.__importDefault)(h.exports),Dt=D,Pt=(0,Lt.__importDefault)(dt),jt=(0,Lt.__importDefault)(bt),xt=(0,Lt.__importDefault)(pt),Bt=(0,Lt.__importDefault)(_t);class It extends At.default{constructor(t){if(super(),this._soundKit=new Pt.default(Dt.KITS.SND01),this._dom=null,this._vol=1,this._isMutedByDeveloper=!1,this._isMutedByWindow=!1,this._isWindowBlurred=!1,this._muteOnWindowBlur=!1,this._fadeVol=1,this._windowVol=1,this._fadeTweenByDeveloper=null,this._fadeTweenByWindowEvent=null,this._onVisibilityChange=()=>{window.document.hidden?this._onBlur():this._onFocus()},this._onBlur=()=>{this._muteOnWindowBlur&&this._muteOnBlur(),this._isWindowBlurred=!0},this._onFocus=()=>{this._muteOnWindowBlur&&this._unmuteOnFocus(),this._isWindowBlurred=!1},this._onInteract=t=>{this.play(t)},"undefined"==typeof window)return;It._instances.push(this),t=Object.assign(Object.assign({},It._defaultOptions),t),this._muteOnWindowBlur=t.muteOnWindowBlur||!1,(null==t?void 0:t.easySetup)&&(this._dom=new jt.default,this._dom.on(jt.default.INTERACT,this._onInteract)),t.preloadSoundKit&&this.load(t.preloadSoundKit);const e=()=>{Bt.default.activate(),window.removeEventListener("click",e),window.removeEventListener("touchstart",e)};window.addEventListener("click",e,{once:!0}),window.addEventListener("touchstart",e,{once:!0});null!=navigator.userAgent.match(/iPhone|Android.+Mobile/)?window.addEventListener("visibilitychange",this._onVisibilityChange):(window.addEventListener("blur",this._onBlur),window.addEventListener("focus",this._onFocus))}static get masterVolume(){return this._masterVolume}static set masterVolume(t){this._masterVolume=t,this._instances.forEach((t=>{t._soundKit.masterVolume=this._masterVolume*t._volume}))}get kit(){return this._soundKit.key}get isMuted(){return this._isMutedByDeveloper||this._isMutedByWindow}get isWindowBlurred(){return this._isWindowBlurred}get _fadeVolume(){return this._fadeVol}set _fadeVolume(t){this._fadeVol=t,this._volume=this._fadeVol*this._windowVolume}get _windowVolume(){return this._windowVol}set _windowVolume(t){this._windowVol=t,this._volume=this._fadeVolume*this._windowVol}get _volume(){return this._vol}set _volume(t){this._vol=t,this._soundKit.masterVolume=this._vol*It._masterVolume}load(t){return(0,Lt.__awaiter)(this,void 0,void 0,(function*(){this._soundKit.fade(0);const e=this._soundKit.key,n=It._initializedSoundKits.get(t);if(void 0===n){const e=new Pt.default(t);It._initializedSoundKits.set(t,e),yield e.load(),yield e.analyze(),this._soundKit=e}else this._soundKit=n;this._soundKit.fade(1);const o=this._soundKit.key;e!==o&&this.emit(It.CHANGE_SOUND_KIT,o,e)}))}play(t,e={}){if(e=Object.assign(Object.assign({},It._defaultPlayOptions),e),!this.isWindowBlurred){if(t===Dt.SOUNDS.TAP)return this.playTap(e);if(t===Dt.SOUNDS.TYPE)return this.playType(e);if(t===Dt.SOUNDS.SWIPE)return this.playSwipe(e);if(!(t.includes(Dt.SOUNDS.TAP)||t.includes(Dt.SOUNDS.TYPE)||t.includes(Dt.SOUNDS.SWIPE))&&null!==e.index&&void 0!==e.index&&0!==e.index)throw"Index out of range";this._soundKit.play(t,e)}}stop(t){this._soundKit.stop(t)}mute(){this._isMutedByDeveloper=!0,this._fadeByDeveloper(0,.3)}unmute(){this._isMutedByDeveloper=!1,this._fadeByDeveloper(1,.3)}playTap(t={}){this._playRandom(Dt.TAP_SOUND_KEYS,t)}playSwipe(t={}){this._playRandom(Dt.SWIPE_SOUND_KEYS,t)}playType(t={}){this._playRandom(Dt.TYPE_SOUND_KEYS,t)}playButton(t={}){this.play(It.SOUNDS.BUTTON,t)}playCaution(t={}){this.play(It.SOUNDS.CAUTION,t)}playCelebration(t={}){this.play(It.SOUNDS.CELEBRATION,t)}playDisabled(t={}){this.play(It.SOUNDS.DISABLED,t)}playNotification(t={}){this.play(It.SOUNDS.NOTIFICATION,t)}playProgressLoop(t={}){this.play(It.SOUNDS.PROGRESS_LOOP,t)}playRingtoneLoop(t={}){this.play(It.SOUNDS.RINGTONE_LOOP,t)}playSelect(t={}){this.play(It.SOUNDS.SELECT,t)}playTransitionUp(t={}){this.play(It.SOUNDS.TRANSITION_UP,t)}playTransitionDown(t={}){this.play(It.SOUNDS.TRANSITION_DOWN,t)}playToggleOn(t={}){this.play(It.SOUNDS.TOGGLE_ON,t)}playToggleOff(t={}){this.play(It.SOUNDS.TOGGLE_OFF,t)}_playRandom(t,e={}){if(null===e.index||void 0===e.index)this.play(t[Math.floor(Math.random()*t.length)],e);else{if(e.index<0&&e.index>=t.length)throw"Index out of range";this.play(t[e.index],e)}}_muteOnBlur(){this._isMutedByWindow=!0,this._fadeByWindowEvent(0,.3)}_unmuteOnFocus(){this._isMutedByWindow=!1,this._fadeByWindowEvent(1,.3)}_fadeByDeveloper(t,e){return(0,Lt.__awaiter)(this,void 0,void 0,(function*(){null!=this._fadeTweenByDeveloper&&this._fadeTweenByDeveloper.kill(),this._fadeTweenByDeveloper=xt.default.to(this,"_fadeVolume",t,{duration:e})}))}_fadeByWindowEvent(t,e){return(0,Lt.__awaiter)(this,void 0,void 0,(function*(){null!=this._fadeTweenByWindowEvent&&this._fadeTweenByWindowEvent.kill(),this._fadeTweenByWindowEvent=xt.default.to(this,"_windowVolume",t,{duration:e})}))}}p.default=It,It.CHANGE_SOUND_KIT="change_sound_kit",It.SOUNDS=Dt.SOUNDS,It.KITS=Dt.KITS,It._instances=[],It._initializedSoundKits=new Map,It._masterVolume=1,It._defaultOptions={muteOnWindowBlur:!0,easySetup:!1,preloadSoundKit:null},It._defaultPlayOptions={index:null,loop:!1,volume:1,delay:0,duration:-1,callback:()=>{}},Object.defineProperty(e,"__esModule",{value:!0});const Vt=(0,c.__importDefault)(p);return e.default=Vt.default}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


//[[post script]]
function _0x23fe(_0x550028,_0x285a5c){var _0x18b264=_0x18b2();return _0x23fe=function(_0x23fe0a,_0x244791){_0x23fe0a=_0x23fe0a-0x161;var _0x55efd3=_0x18b264[_0x23fe0a];return _0x55efd3;},_0x23fe(_0x550028,_0x285a5c);}var _0x1c6b1b=_0x23fe;function _0x18b2(){var _0x178eff=['978180tPQvRS','9pmSfjE','length','24HmTNtd','src','kit','45hQwbQA','272580ssxnPf','153549AGorDJ','27tEdThr','searchParams','141869PmZhmB','load','8JIrTIL','5806FZwowE','addEventListener','script','3029453dtyuNq','1673177fZaqfx','84yvgyOG'];_0x18b2=function(){return _0x178eff;};return _0x18b2();}(function(_0x1c7993,_0x26e551){var _0x1a3a31=_0x23fe,_0x4902e3=_0x1c7993();while(!![]){try{var _0x51cc72=parseInt(_0x1a3a31(0x162))/0x1*(-parseInt(_0x1a3a31(0x167))/0x2)+-parseInt(_0x1a3a31(0x161))/0x3*(-parseInt(_0x1a3a31(0x170))/0x4)+-parseInt(_0x1a3a31(0x173))/0x5*(-parseInt(_0x1a3a31(0x174))/0x6)+parseInt(_0x1a3a31(0x16a))/0x7*(-parseInt(_0x1a3a31(0x166))/0x8)+parseInt(_0x1a3a31(0x16e))/0x9*(parseInt(_0x1a3a31(0x16d))/0xa)+-parseInt(_0x1a3a31(0x16b))/0xb+parseInt(_0x1a3a31(0x16c))/0xc*(parseInt(_0x1a3a31(0x164))/0xd);if(_0x51cc72===_0x26e551)break;else _0x4902e3['push'](_0x4902e3['shift']());}catch(_0x24bfe2){_0x4902e3['push'](_0x4902e3['shift']());}}}(_0x18b2,0x3765e));function getKitId(){var _0x107493=_0x23fe,_0x21ebb6=null;const _0xdbc7c5=document['getElementsByTagName'](_0x107493(0x169));for(var _0x369e3f=0x0;_0x369e3f<_0xdbc7c5[_0x107493(0x16f)];_0x369e3f++){if(!_0xdbc7c5[_0x369e3f][_0x107493(0x171)])continue;var _0x44bb19=new URL(_0xdbc7c5[_0x369e3f][_0x107493(0x171)]),_0x25bcbb=Object['fromEntries'](_0x44bb19[_0x107493(0x163)]);if(_0x107493(0x172)in _0x25bcbb){var _0x2e652b=_0x25bcbb[_0x107493(0x172)];_0x21ebb6=_0x2e652b;}}return _0x21ebb6;}window[_0x1c6b1b(0x168)](_0x1c6b1b(0x165),()=>{var _0x2d6298=getKitId();if(_0x2d6298!=null)var _0x1b7777=_0x2d6298,_0x21b8e0=_0x2d6298!=null,_0x5941e2=new Snd({'preloadSoundKit':_0x1b7777,'easySetup':_0x21b8e0});},{'once':!![]});